import React, { forwardRef, useId, useState } from 'react';
import PropTypes from 'prop-types';
import classNames from '../../_virtual/index.js';
import { CTabsContext } from './CTabsContext.js';

var CTabs = forwardRef(function (_a, ref) {
    var children = _a.children, activeItemKey = _a.activeItemKey, className = _a.className, defaultActiveItemKey = _a.defaultActiveItemKey, onChange = _a.onChange;
    var id = useId();
    var isControlled = activeItemKey !== undefined;
    var _b = useState(function () { return (isControlled ? undefined : defaultActiveItemKey); }), internalActiveItemKey = _b[0], setInternalActiveItemKey = _b[1];
    var currentActiveItemKey = isControlled ? activeItemKey : internalActiveItemKey;
    var setActiveItemKey = function (value) {
        if (!isControlled) {
            setInternalActiveItemKey(value);
        }
        onChange === null || onChange === void 0 ? void 0 : onChange(value);
    };
    return (React.createElement(CTabsContext.Provider, { value: { _activeItemKey: currentActiveItemKey, setActiveItemKey: setActiveItemKey, id: id } },
        React.createElement("div", { className: classNames('tabs', className), ref: ref }, children)));
});
CTabs.propTypes = {
    activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    children: PropTypes.node,
    className: PropTypes.string,
    defaultActiveItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    onChange: PropTypes.func,
};
CTabs.displayName = 'CTabs';

export { CTabs };
//# sourceMappingURL=CTabs.js.map
